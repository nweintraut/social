{"ts":1367717284630,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1367717242319,"patch":[[{"diffs":[[1,"define(['SocialNetView', 'text!templates/chatsession.html'],\nfunction(SocialNetView, chatItemTemplate) {\n  var chatItemView = SocialNetView.extend({\n    tagName: 'div',\n\n    className: 'chat_session',\n\n    $el: $(this.el),\n\n    events: {\n      'submit form': 'sendChat'\n    },\n\n    initialize: function(options) {\n      this.socketEvents = options.socketEvents;\n      this.socketEvents.on(\n        'socket:chat:in:' + this.model.get('accountId'),\n        this.receiveChat,\n        this\n      );\n    },\n\n    receiveChat: function(data) {\n      var chatLine = this.model.get('name').first + ': ' + data.text;\n      this.$el.find('.chat_log').append($('<li>' + chatLine + '</li>'));\n    },\n\n    sendChat: function() {\n      var chatText = this.$el.find('input[name=chat]').val();\n      if ( chatText && /[^\\s]+/.test(chatText) ) {\n        var chatLine = 'Me: ' + chatText;\n        this.$el.find('.chat_log').append($('<li>' + chatLine + '</li>'));\n        this.socketEvents.trigger('socket:chat', {\n          to: this.model.get('accountId'),\n          text: chatText\n        });\n      }\n      return false;\n    },\n\n    render: function() {\n      this.$el.html(_.template(chatItemTemplate, {\n        model: this.model.toJSON()\n      }));\n      return this;\n    }\n  });\n\n  return chatItemView;\n});"]],"start1":0,"start2":0,"length1":0,"length2":1292}]],"length":1292,"saved":false}
{"contributors":[],"silentsave":false,"ts":1367731647927,"patch":[[{"diffs":[[1,"/* "],[0,"define(["]],"start1":0,"start2":0,"length1":8,"length2":11},{"diffs":[[0,"iew;\n});"],[1,"\n*/\ndefine(['SocialNetView', 'text!templates/chatsession.html'],\nfunction(SocialNetView, chatItemTemplate) {\n  var chatItemView = SocialNetView.extend({\n    tagName: 'div',\n\n    className: 'chat_session',\n\n    $el: $(this.el),\n\n    events: {\n      'submit form': 'sendChat'\n    },\n\n    initialize: function(options) {\n      this.socketEvents = options.socketEvents;\n      var accountId = this.model.get('accountId');\n      this.socketEvents.on('socket:chat:in:' + accountId, this.receiveChat, this);\n      this.socketEvents.bind(\n        'login:' + accountId,\n        this.handleContactLogin,\n        this\n      );\n      this.socketEvents.bind(\n        'logout:' + accountId,\n        this.handleContactLogout,\n        this\n      );\n    },\n\n    handleContactLogin: function() {\n      this.$el.find('.online_indicator').addClass('online');\n      this.model.set('online', true);\n    },\n\n    handleContactLogout: function() {\n      this.model.set('online', false);\n      $onlineIndicator = this.$el.find('.online_indicator');\n      while ( $onlineIndicator.hasClass('online') ) {\n        $onlineIndicator.removeClass('online');\n      }\n    },\n\n    receiveChat: function(data) {\n      var chatLine = this.model.get('name').first + ': ' + data.text;\n      this.$el.find('.chat_log').append($('<li>' + chatLine + '</li>'));\n    },\n\n    sendChat: function() {\n      var chatText = this.$el.find('input[name=chat]').val();\n      if ( chatText && /[^\\s]+/.test(chatText) ) {\n        var chatLine = 'Me: ' + chatText;\n        this.$el.find('.chat_log').append($('<li>' + chatLine + '</li>'));\n        this.socketEvents.trigger('socket:chat', {\n          to: this.model.get('accountId'),\n          text: chatText\n        });\n      }\n      return false;\n    },\n\n    render: function() {\n      this.$el.html(_.template(chatItemTemplate, {\n        model: this.model.toJSON()\n      }));\n      if ( this.model.get('online') ) this.handleContactLogin();\n      return this;\n    }\n  });\n\n  return chatItemView;\n});"]],"start1":1287,"start2":1287,"length1":8,"length2":2002}]],"length":3289,"saved":false}
